# Класс "Заметка", разновидность базового класса "Запись"
class Memo < Post
  # отдельный конструктор здесь не нужен, т.к. он совпадает с родительским

  # Метод записывает данные из консоли в переменные класса
  def read_from_console
    puts "Новая заметка (все, что пишите до строчки \"end\"):"
    line = nil # Объявим переменную, которая будет содержать текущую введенную строку

    # Запустим цикл, пока не дошли до строчки "end",
    while line != "end" do
      # Читаем очередную строку и записываем в массив @text
      line = STDIN.gets.chomp
      @text << line
    end

    # Удалим последний элемент из массива @text – там служебное слово "end"
    @text.pop
  end

  # Метод возвращает строки, которые будут записаны в БД
  # Ко всем строкам массива @text (тела заметки) добавим строку с датой создания заметки
  # [time_string, @text]
  def to_strings
    time_strings = "Создано: #{@created_at.strftime('%Y.%m.%d, %H:%M:%S')}\n"
    return @text.unshift(time_strings)
  end

  # Метод на сохранение в БД: добавляет ключ, соответствующий этому типу записи помимо родительских ключей, в хэш
  def to_db_hash
    return super.merge(
      {
        'text' => @text.join('\n\r') # массив строк делаем одной большой строкой
      }
    )
  end

  # Метод на чтение из БД данных для класса Memo: считывает дополнительно text заметки
  def load_data(data_hash)
    super(data_hash) # сперва дергаем родительский метод load_data для общего поля @created_at
    @text = data_hash['text'].split('\n\r')
  end
end