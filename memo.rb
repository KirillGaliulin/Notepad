# Класс "Заметка", разновидность базового класса "Запись"
class Memo < Post
  # отдельный конструктор здесь не нужен, т.к. он совпадает с родительским

  # Метод, который спрашивает у пользователя, что он хочет написать в дневнике
  def read_from_console
    puts "Новая заметка (все, что пишите до строчки \"end\"):"

    # Объявим переменную, которая будет содержать текущую введенную строку
    line = nil

    # Запустим цикл, пока не дошли до строчки "end",
    while line != "end" do
      # Читаем очередную строку и записываем в массив @text
      line = STDIN.gets.chomp
      @text << line
    end

    # Теперь удалим последний элемент из массива @text – там служебное слово "end"
    @text.pop
  end

  # Метод to_string должен вернуть все строки, которые мы хотим записать в
  # файл при записи нашей заметки: помимо всех строк массива @text (тела
  # заметки) мы положим туда строку с датой создания заметки.
  def to_strings
    # Сгенерируем строку с датой создания заметки используя объект класса Time,
    # который у нас находится в переменной @created_at (смотрите конструктор
    # класса-родителя Post).
    # time_strings = "Создано: #{@created_at.strftime("%Y.%m.%d, %H:%M:%S")}\n"
    time_strings = "Создано: #{@created_at.strftime('%Y.%m.%d, %H:%M:%S')}\n"

    # Возвращаем массив @text с добавление в начало (методом массива unshift)
    # строчки с датой создания заметки.
    return @text.unshift(time_strings)
  end

  def to_db_hash
    return super.merge(
      {
        'text' => @text.join('\n\r') # массив строк делаем одной большой строкой
      }
    )
  end

  # загружаем свои поля из хэш массива
  def load_data(data_hash)
    super(data_hash) # сперва дергаем родительский метод для общих полей

    # теперь прописываем свое специфичное поле
    @text = data_hash['text'].split('\n\r')
  end
end